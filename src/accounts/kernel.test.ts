import { type Address, keccak256 } from 'viem'
import { describe, expect, test } from 'vitest'

import {
  accountA,
  accountB,
  MOCK_API_KEY,
  passkeyAccount,
} from '../../test/consts'
import { MODULE_TYPE_ID_VALIDATOR } from '../modules/common'
import {
  getAddress,
  getDeployArgs,
  getInstallData,
  getPackedSignature,
} from './kernel'

const MOCK_MODULE_ADDRESS = '0x28de6501fa86f2e6cd0b33c3aabdaeb4a1b93f3f'

describe('Accounts: Kernel', () => {
  describe('Deploy Args', () => {
    test('ECDSA owners', () => {
      const {
        factory,
        factoryData,
        salt,
        implementation,
        initializationCallData,
      } = getDeployArgs({
        owners: {
          type: 'ecdsa',
          accounts: [accountA, accountB],
        },
        rhinestoneApiKey: MOCK_API_KEY,
      })

      expect(factory).toEqual('0xd703aae79538628d27099b8c4f621be4ccd142d5')
      expect(factoryData).toEqual(
        '0xc5265d5d0000000000000000000000002577507b78c2008ff367261cb6285d44ba5ef2e90000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003243c3b752b010000000000E9E6E96Bcaa3c113187CdB7E38AED90000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000020000000000000000000000006092086a3dc0020cd604a68fcf5d430007d51bb7000000000000000000000000f6c02c78ded62973b43bfa523b247da09948693600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000001249517e29f000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000005ad9ce1f5035fd62ca96cef16adaaf
      )
      expect(salt).toEqual(
        '0x0000000000000000000000000000000000000000000000000000000000000000',
      )
      expect(implementation).toEqual(
        '0xd6CEDDe84be40893d153Be9d467CD6aD37875b28',
      )
      expect(initializationCallData).toEqual(
        '0x3c3b752b010000000000E9E6E96Bcaa3c113187CdB7E38AED90000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000020000000000000000000000006092086a3dc0020cd604a68fcf5d430007d51bb7000000000000000000000000f6c02c78ded62973b43bfa523b247da09948693600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000001249517e29f000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000005ad9ce1f5035fd62ca96cef16adaaf
      )
    })

    test('Passkey owner', () => {
      const {
        factory,
        factoryData,
        salt,
        implementation,
        initializationCallData,
      } = getDeployArgs({
        owners: {
          type: 'passkey',
          accounts: [passkeyAccount],
        },
        rhinestoneApiKey: MOCK_API_KEY,
      })

      expect(factory).toEqual('0xd703aae79538628d27099b8c4f621be4ccd142d5')
      expect(factoryData).toEqual(
        '0xc5265d5d0000000000000000000000002577507b78c2008ff367261cb6285d44ba5ef2e90000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002e43c3b752b010000000000578c4cB0e472a5462da43C495C3F330000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000060580a9af0569ad3905b26a703201b358aa0904236642ebe79b22a19d00d3737637d46f725a5427ae45a9569259bf67e1e16b187d7b3ad1ed70138c4f0409677d19c9a01073b202db2ed56e604ad11db557d8c3ad75181619597f21b830f2da82a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000001249517e29f000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000005ad9ce1f5035fd62ca96cef16adaaf
      )
      expect(salt).toEqual(
        '0x0000000000000000000000000000000000000000000000000000000000000000',
      )
      expect(implementation).toEqual(
        '0xd6CEDDe84be40893d153Be9d467CD6aD37875b28',
      )
      expect(initializationCallData).toEqual(
        '0x3c3b752b010000000000578c4cB0e472a5462da43C495C3F330000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000060580a9af0569ad3905b26a703201b358aa0904236642ebe79b22a19d00d3737637d46f725a5427ae45a9569259bf67e1e16b187d7b3ad1ed70138c4f0409677d19c9a01073b202db2ed56e604ad11db557d8c3ad75181619597f21b830f2da82a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000001249517e29f000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000005ad9ce1f5035fd62ca96cef16adaaf
      )
    })
  })

  describe('Get Address', () => {
    test('ECDSA owners', () => {
      const address = getAddress({
        owners: {
          type: 'ecdsa',
          accounts: [accountA, accountB],
        },
        rhinestoneApiKey: MOCK_API_KEY,
      })

      expect(address).toEqual('0xe4090134D2FdC0fc13b43651B5b1c75BDf825c5f')
    })

    test('Passkey owner', () => {
      const address = getAddress({
        owners: {
          type: 'passkey',
          accounts: [passkeyAccount],
        },
        rhinestoneApiKey: MOCK_API_KEY,
      })

      expect(address).toEqual('0x5a4063A8f32201C84B8e7a073C7494D53D7dFAe7')
    })
  })

  describe('Get Install Data', () => {
    test('Module', () => {
      const installData = getInstallData({
        address: MOCK_MODULE_ADDRESS,
        initData: '0xabcd',
        type: MODULE_TYPE_ID_VALIDATOR,
        deInitData: '0x0000',
        additionalContext: '0x0000',
      })

      expect(installData).toEqual([
        '0x9517e29f000000000000000000000000000000000000000000000000000000000000000100000000000000000000000028de6501fa86f2e6cd0b33c3aabdaeb4a1b93f3f000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000f40000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000002abcd00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
        '0xb9b829410128de6501fa86f2e6cd0b33c3aabdaeb4a1b93f3f0000000000000000000000e9ae5c53000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001',
      ])
    })
  })

  describe('Get Packed Signature', () => {
    describe('Mock signature', () => {
      test('Root validator', async () => {
        const hash = keccak256('0xabcd')
        const mockSignature = '0x1234'
        const accountAddress = '0xa80ed905adbd7cba128aaf64a1fa33a530b9b0aa'
        const validator = {
          address: '0xe35b75e5ec3c04e9cefa8e581fbee859f56edeb4' as Address,
          isRoot: true,
        }
        const signature = await getPackedSignature(
          async (_) => mockSignature,
          hash,
          validator,
          accountAddress,
        )

        expect(signature).toEqual(
          '0x000555ad2729e8da1777a4e5020806f8bf7601c3db6bfe402f410a34958363a95a1234',
        )
      })

      test('Non-root validator', async () => {
        const hash = keccak256('0xabcd')
        const mockSignature = '0x1234'
        const accountAddress = '0xa80ed905adbd7cba128aaf64a1fa33a530b9b0aa'
        const validator = {
          address: '0xe35b75e5ec3c04e9cefa8e581fbee859f56edeb4' as Address,
          isRoot: false,
        }
        const signature = await getPackedSignature(
          async (_) => mockSignature,
          hash,
          validator,
          accountAddress,
        )

        expect(signature).toEqual(
          '0x01e35b75e5ec3c04e9cefa8e581fbee859f56edeb40555ad2729e8da1777a4e5020806f8bf7601c3db6bfe402f410a34958363a95a1234',
        )
      })
    })
  })
})
