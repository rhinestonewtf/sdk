import { Address, keccak256 } from 'viem'
import { describe, expect, test } from 'vitest'

import {
  accountA,
  accountB,
  MOCK_API_KEY,
  passkeyAccount,
} from '../../test/consts'
import { getAddress, getDeployArgs, getPackedSignature } from './kernel'

describe('Accounts: Kernel', () => {
  describe('Deploy Args', () => {
    test('ECDSA owners', () => {
      const {
        factory,
        factoryData,
        salt,
        implementation,
        initializationCallData,
      } = getDeployArgs({
        owners: {
          type: 'ecdsa',
          accounts: [accountA, accountB],
        },
        rhinestoneApiKey: MOCK_API_KEY,
      })

      expect(factory).toEqual('0xd703aae79538628d27099b8c4f621be4ccd142d5')
      expect(factoryData).toEqual(
        '0xc5265d5d0000000000000000000000002577507b78c2008ff367261cb6285d44ba5ef2e90000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007c43c3b752b012483DA3A338895199E5e538530213157e931Bf060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000020000000000000000000000006092086a3dc0020cd604a68fcf5d430007d51bb7000000000000000000000000f6c02c78ded62973b43bfa523b247da09948693600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000034000000000000000000000000000000000000000000000000000000000000004a000000000000000000000000000000000000000000000000000000000000001249517e29f0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000043ff16d5776c7f0f65ec485c17cae29f00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000e5a37279a001301a837a91b5de1d5ee29f00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000f6ed8be424d673c63eeff8be29f00000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000e5a37279a001301a837a91b5de1d5e000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000b83a5be8cb00000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
      )
      expect(salt).toEqual(
        '0x0000000000000000000000000000000000000000000000000000000000000000',
      )
      expect(implementation).toEqual(
        '0xd6CEDDe84be40893d153Be9d467CD6aD37875b28',
      )
      expect(initializationCallData).toEqual(
        '0x3c3b752b012483DA3A338895199E5e538530213157e931Bf060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000018000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000020000000000000000000000006092086a3dc0020cd604a68fcf5d430007d51bb7000000000000000000000000f6c02c78ded62973b43bfa523b247da09948693600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000034000000000000000000000000000000000000000000000000000000000000004a000000000000000000000000000000000000000000000000000000000000001249517e29f0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000043ff16d5776c7f0f65ec485c17cae29f00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000e5a37279a001301a837a91b5de1d5e00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000094000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001249517e29f00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000f6ed8be424d673c63eeff8be29f00000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000e5a37279a001301a837a91b5de1d5e000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000b83a5be8cb000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
      )
    })

    test('Passkey owner', () => {
      const {
        factory,
        factoryData,
        salt,
        implementation,
        initializationCallData,
      } = getDeployArgs({
        owners: {
          type: 'passkey',
          account: passkeyAccount,
        },
        rhinestoneApiKey: MOCK_API_KEY,
      })

      expect(factory).toEqual('0xd703aae79538628d27099b8c4f621be4ccd142d5')
      expect(factoryData).toEqual(
        '0xc5265d5d0000000000000000000000002577507b78c2008ff367261cb6285d44ba5ef2e90000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000007843c3b752b012f167e55d42584f65e2e30a748f41ee75a3114140000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000060580a9af0569ad3905b26a703201b358aa0904236642ebe79b22a19d00d3737637d46f725a5427ae45a9569259bf67e1e16b187d7b3ad1ed70138c4f0409677d19c9a01073b202db2ed56e604ad11db557d8c3ad75181619597f21b830f2da82a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000034000000000000000000000000000000000000000000000000000000000000004a000000000000000000000000000000000000000000000000000000000000001249517e29f0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000043ff16d5776c7f0f65ec485c17cae29f00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000e5a37279a001301a837a91b5de1d5ee29f00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000f6ed8be424d673c63eeff8be29f00000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000e5a37279a001301a837a91b5de1d5e000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000b83a5be8cb00000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
      )
      expect(salt).toEqual(
        '0x0000000000000000000000000000000000000000000000000000000000000000',
      )
      expect(implementation).toEqual(
        '0xd6CEDDe84be40893d153Be9d467CD6aD37875b28',
      )
      expect(initializationCallData).toEqual(
        '0x3c3b752b012f167e55d42584f65e2e30a748f41ee75a3114140000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000001400000000000000000000000000000000000000000000000000000000000000060580a9af0569ad3905b26a703201b358aa0904236642ebe79b22a19d00d3737637d46f725a5427ae45a9569259bf67e1e16b187d7b3ad1ed70138c4f0409677d19c9a01073b202db2ed56e604ad11db557d8c3ad75181619597f21b830f2da82a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000000000034000000000000000000000000000000000000000000000000000000000000004a000000000000000000000000000000000000000000000000000000000000001249517e29f0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000043ff16d5776c7f0f65ec485c17cae29f00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000e5a37279a001301a837a91b5de1d5ee29f00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000f6ed8be424d673c63eeff8be29f00000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000e5a37279a001301a837a91b5de1d5e000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000b83a5be8cb000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
      )
    })
  })

  describe('Get Address', () => {
    test('ECDSA owners', () => {
      const address = getAddress({
        owners: {
          type: 'ecdsa',
          accounts: [accountA, accountB],
        },
        rhinestoneApiKey: MOCK_API_KEY,
      })

      expect(address).toEqual('0x4136efCf5ec08dca0129341FbeEe55c21549c271')
    })

    test('Passkey owner', () => {
      const address = getAddress({
        owners: {
          type: 'passkey',
          account: passkeyAccount,
        },
        rhinestoneApiKey: MOCK_API_KEY,
      })

      expect(address).toEqual('0x2a39d4Ba4F2747041529024acF21aA0D43ABfc43')
    })
  })

  describe('Get Packed Signature', () => {
    test('Mock signature', async () => {
      const hash = keccak256('0xabcd')
      const mockSignature = '0x1234'
      const accountAddress = '0xa80ed905adbd7cba128aaf64a1fa33a530b9b0aa'
      const validator = {
        address: '0xe35b75e5ec3c04e9cefa8e581fbee859f56edeb4' as Address,
        isRoot: true,
      }
      const signature = await getPackedSignature(
        async (_) => mockSignature,
        hash,
        validator,
        accountAddress,
      )

      expect(signature).toEqual(
        '0x000555ad2729e8da1777a4e5020806f8bf7601c3db6bfe402f410a34958363a95a1234',
      )
    })
  })
})
